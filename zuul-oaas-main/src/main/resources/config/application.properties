###############################################################################
# Default configuration file                                                  #
#                                                                             #
# This file sets default values for all configuration properties.             #
# Any property can be overridden using:                                       #
#                                                                             #
# 1. command line arguments (e.g. -Dlogging.path=/var/log),                   #
# 2. JNDI attributes from java:comp/env,                                      #
# 3. Java System properties,                                                  #
# 4. user-provided configuration file specified by command line argument      #
#    --config=/path/to/file.                                                  #
#                                                                             #
###############################################################################

# Application name.
spring.application.name=zuul-oaas

# Command-separated list of active profiles.
spring.profiles.active=production,ldap

# Location of user-provided config file.
spring.config.location=config/zuul-oaas.properties


#######################################
# Logging
#

# Location of logback config file.
logging.config=classpath:config/logback.groovy

# Path of directory to store log files.
logging.path=.

# Sentry DSN. If empty, then Sentry will be disabled. Default is empty.
logging.env.sentry.dsn=

# Minimal level to log into Sentry. Default is WARN.
# Possible values: ERROR, WARN, INFO, DEBUG, TRACE.
logging.env.sentry.level=WARN


#######################################
# HTTP server
#

# The port to listen on for HTTP connections (or 0 for a randomly allocated port).
server.port=${port:8080}

# The address to bind to.
server.address=0.0.0.0

# The context path; empty string for '/'.
server.context_path=


#######################################
# Persistence
#

# A comma separated list of MongoDB servers. Each server must be specified by
# a host and optionally a port (default is 27017). Multiple servers can be
# provided for a replica set.
# Example: host1, host2:27018, host3:27019
persistence.mongo.servers=localhost:27017

# The name of the database to connect to. Default is 'oaas'.
persistence.mongo.dbname=oaas

# The username to use when connecting to a MongoDB server(s).
persistence.mongo.username=

# The password to use when connecting to a MongoDB server(s). Default is empty.
persistence.mongo.password=

# The write concern to use.
# Allowed values:
#   acknowledged:   Waits for acknowledgement from the primary server before returning.
#   unacknowledged: Return as soon as the message is written to the socket. Exceptions are NOT raised for server errors.
#   fsynced:        Waits for the server to flush the data to disk.
#   journaled:      Waits for the server to group commit to the journal file on disk.
#   majority:       Waits on a majority of servers for the write operation.
#   replica_acknowledged: Waits for at least 2 servers for the write operation.
persistence.mongo.write_concern=acknowledged

# The preferred replica set members to which a query or command can be sent.
# This option is valid only for replica sets.
#
# Allowed values:
#   primary:            Read from primary only.
#   primaryPreferred:   Read from primary if available, otherwise from secondary.
#   secondary:          Read from secondary only.
#   secondaryPreferred: Read secondary if available, otherwise from primary.
#   nearest:            Read from the nearest node.
persistence.mongo.read_preference=primaryPreferred


#######################################
# OAuth 2.0 server
#

# The URI at which a user is redirected for authorization.
# Default value: "/oauth/authorize".
oaas.endpoint.authorization.uri=/oauth/authorize

# The URI at which a request for an access token will be serviced.
# Default value: "/oauth/token".
oaas.endpoint.token.uri=/oauth/token

# Allows clients to authenticate using request parameters (form)? This is
# permitted by the specification, but not recommended. Clients should use
# HTTP Basic authentication instead.
oaas.endpoint.token.allow_form_auth=false

# The URI for resource providers to check tokens.
# Default value: "/oauth/check_token".
oaas.endpoint.check_token.uri=/oauth/check_token

# The expression to secure check token endpoint.
oaas.endpoint.check_token.access=permitAll()

# The default validity (in seconds) of the access token. Zero or negative for
# non-expiring tokens.
oaas.access_token.validity=3600

# Enable Refresh Tokens?
oaas.refresh_token.enabled=true

# The default validity (in seconds) of the Refresh Token.
oaas.refresh_token.validity=2592000

# Whether to reuse refresh tokens (until expired).
oaas.refresh_token.reuse=true

# Enable Authorization Code grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.1>
oaas.grant.authorization_code.enabled=true

# Enable Implicit grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.2>
oaas.grant.implicit.enabled=true

# Enable Client Credentials grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.4>
oaas.grant.client_credentials.enabled=true

# Enable Resource Owner Password Credentials grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.3>
oaas.grant.password.enabled=false


#######################################
# RESTful API
#

# The max-age value of the Cache-Control header in /api/v1/tokeninfo.
restapi.tokeninfo.cache.maxage=600

# The expression to secure /api/v1/tokeninfo.
restapi.tokeninfo.security.access=#oauth2.hasScope("urn:zuul:oauth:oaas:tokeninfo") and #oauth2.isClient()

# The expression to secure /api/v1/** (excluding tokeninfo).
restapi.security.access=#oauth2.hasScope("urn:zuul:oauth:oaas:manager") and #oauth2.isClient()


#######################################
# Users authentication via LDAP
#

# The URL with scheme, host and optionally port to connect to a LDAP server.
auth.user.ldap.server.uri=ldap://localhost:636

# Optional root suffix.
auth.user.ldap.server.base_dn=c=org,cn=example

# A specific pattern used to build the user's DN, for example "uid={0},ou=people".
# The key "{0}" must be present and will be substituted with the username.
auth.user.ldap.user_dn_pattern=uid={0},ou=People

# The search base for user searches. Defaults to "". Only used with a
# 'user_search_filter'.
auth.user.ldap.user_search_base=

# The LDAP filter used to search for users (optional). For example "(uid={0})".
# The substituted parameter is the user's login name.
auth.user.ldap.user_search_filter=

# The name of the LDAP attribute which contains the user's first name.
# Default is "givenName".
auth.user.ldap.attribute.fist_name=givenName

# The name of the LDAP attribute which contains the user's last name.
# Defaults is "sn".
auth.user.ldap.attribute.last_name=sn

# The name of the LDAP attribute which contains the user's e-mail address.
# Default is "mail".
auth.user.ldap.attribute.email=mail


#######################################
# Users authentication via SAML / Shibboleth
#

# Relative URI of the SAML entry point to initialize SAML WebSSO from the SP side (i.e. login
# user using SAML).
auth.user.saml.endpoint.login=/saml/login

# Relative URI of the WebSSO Assertion Consumer endpoint.
auth.user.saml.endpoint.websso=/saml/SSO

# Relative URI of the endpoint where to expose generated SP metadata.
auth.user.saml.endpoint.metadata=/saml/metadata

# Unique identifier of this SP.
auth.user.saml.sp.metadata.entity_id=cz.cvut.zuul.test.sp

# Generate SP metadata and serve it on ${auth.user.saml.endpoint.metadata}?
auth.user.saml.sp.metadata.generate=true

# URL of the IDP metadata to be fetched.
auth.user.saml.idp.metadata.url=https://www.testshib.org/metadata/testshib-providers.xml

# The minimum amount of time, in seconds, between refreshes of IDP metadata.
auth.user.saml.idp.metadata.min_refresh_delay=3000

# The maximum amount of time, in seconds, between refreshes of IDP metadata.
# This is used when metadata does not contain any validUntil or cacheDuration information.
auth.user.saml.idp.metadata.max_refresh_delay=144000

# Path of the keystore file.
auth.user.saml.keystore.path=classpath:/config/saml/keystore.jks

# The keystore password.
auth.user.saml.keystore.password=nalle123

# Alias of the SP's private key stored in the keystore.
auth.user.saml.keystore.sp_key.alias=apollo

# Password for the SP's private key store in the keystore.o
auth.user.saml.keystore.sp_key.password=nalle123

# Command-separated list of SAML attributes that contain the user's e-mail address.
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.email=urn:oid:0.9.2342.19200300.100.1.3

# Command-separated list of SAML attributes that contain the user's first name (given name).
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.first_name=urn:oid:2.5.4.42

# Command-separated list of SAML attributes that contain the user's first name (last name).
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.last_name=urn:oid:2.5.4.4

# Command-separated list of SAML attributes that contain the user's username (uid).
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.username=urn:oid:0.9.2342.19200300.100.1.1
