###############################################################################
# Default configuration file                                                  #
#                                                                             #
# This file sets default values for all configuration properties.             #
# Any property can be overridden using:                                       #
#                                                                             #
# 1. command line arguments (e.g. -Dlogging.path=/var/log),                   #
# 2. JNDI attributes from java:comp/env,                                      #
# 3. Java System properties,                                                  #
# 4. user-provided configuration file specified by command line argument      #
#    --config=/path/to/file.                                                  #
#                                                                             #
###############################################################################

# Application name.
spring.application.name=zuul-oaas

# Command-separated list of active profiles.
spring.profiles.active=production,ldap

# Location of user-provided config file.
spring.config.location=config/zuul-oaas.properties


#######################################
# Logging
#

# Location of logback config file.
logging.config=classpath:config/logback.groovy

# Path of directory to store log files.
logging.path=.

# Sentry DSN. If empty, then Sentry will be disabled. Default is empty.
logging.env.sentry.dsn=

# Minimal level to log into Sentry. Default is WARN.
# Possible values: ERROR, WARN, INFO, DEBUG, TRACE.
logging.env.sentry.level=WARN


#######################################
# HTTP server
#

# The port to listen on for HTTP connections (or 0 for a randomly allocated port).
server.port=${port:8080}

# The address to bind to.
server.address=0.0.0.0

# The context path; empty string for '/'.
server.context_path=


#######################################
# Persistence / JDBC
#

# The host name of the SQL server.
persistence.jdbc.host=${DB_HOST:localhost}

# The port number of the SQL server.
persistence.jdbc.port=${DB_PORT:5432}

# The name of the database on the SQL server.
persistence.jdbc.dbname=${DB_NAME:zuul_oaas}

# The username of the database user.
persistence.jdbc.username=${DB_USER:zuul_oaas}

# The password of the database user.
persistence.jdbc.password=${DB_PASSWORD:}

# The name of the DataSource class provided by the JDBC driver.
persistence.jdbc.data_source_class=com.impossibl.postgres.jdbc.PGDataSource

# The maximum size that the pool is allowed to reach, including both idle and in-use connections.
# Basically this value will determine the maximum number of actual connections to the database
# backend.
persistence.jdbc.pool.max_size=10

# The minimum number of idle connections that HikariCP tries to maintain in the pool.
# It's recommended to keep this value the same as persistence.jdbc.pool.max_size.
persistence.jdbc.pool.min_idle=5

# The maximum lifetime of a connection in the pool (in seconds). When a connection reaches this
# timeout it will be retired from the pool. It should be at least 30 seconds less than any
# database-level connection timeout. A value of 0 indicates no maximum lifetime, subject of course
# to the persistence.jdbc.pool.idle_timeout setting.
persistence.jdbc.pool.max_lifetime=1800

# This maximum amount of time (in seconds) that a connection is allowed to sit idle in the pool.
# A value of 0 means that idle connections are never removed from the pool.
persistence.jdbc.pool.idle_timeout=600


#######################################
# OAuth 2.0 server
#

# The URI at which a user is redirected for authorization.
# Default value: "/oauth/authorize".
oaas.endpoint.authorization.uri=/oauth/authorize

# The URI at which a request for an access token will be serviced.
# Default value: "/oauth/token".
oaas.endpoint.token.uri=/oauth/token

# Allows clients to authenticate using request parameters (form)? This is
# permitted by the specification, but not recommended. Clients should use
# HTTP Basic authentication instead.
oaas.endpoint.token.allow_form_auth=false

# The URI for resource providers to check tokens.
# Default value: "/oauth/check_token".
oaas.endpoint.check_token.uri=/oauth/check_token

# The expression to secure check token endpoint.
oaas.endpoint.check_token.access=permitAll()

# The maximum number of tokens that the check token endpoint should keep
# in its cache.
oaas.endpoint.check_token.cache.max_entries=100

# The default validity (in seconds) of the access token. Zero or negative for
# non-expiring tokens.
oaas.access_token.validity=3600

# Enable Refresh Tokens?
oaas.refresh_token.enabled=true

# The default validity (in seconds) of the Refresh Token.
oaas.refresh_token.validity=2592000

# Whether to reuse refresh tokens (until expired).
oaas.refresh_token.reuse=true

# The validity (in seconds) of an user approval, i.e. authorization of
# particular scope for specific client.
oaas.user_approval.validity=2592000

# Enable Authorization Code grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.1>
oaas.grant.authorization_code.enabled=true

# Enable Implicit grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.2>
oaas.grant.implicit.enabled=true

# Enable Client Credentials grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.4>
oaas.grant.client_credentials.enabled=true

# Enable Resource Owner Password Credentials grant?
# See <http://tools.ietf.org/html/rfc6749#section-1.3.3>
oaas.grant.password.enabled=false

# The 6-fields cron expression that specifies how often to clean expired access
# and refresh tokens. Expression "0 0 */2 * * *" means every 2 hours.
oaas.scheduler.clean_expired_tokens.cron=0 0 */2 * * *


#######################################
# RESTful API
#

# The max-age value of the Cache-Control header in /api/v1/tokeninfo.
restapi.tokeninfo.cache.maxage=600

# The expression to secure /api/v1/tokeninfo.
restapi.tokeninfo.security.access=#oauth2.hasScope("urn:zuul:oauth:oaas:tokeninfo") and #oauth2.isClient()

# The expression to secure /api/v1/** (excluding tokeninfo).
restapi.security.access=#oauth2.hasScope("urn:zuul:oauth:oaas:manager") and #oauth2.isClient()


#######################################
# Users authentication via LDAP
#

# The URL with scheme, host and optionally port to connect to a LDAP server.
auth.user.ldap[0].server.uri=ldap://localhost:636

# Optional root suffix.
auth.user.ldap[0].server.base_dn=c=org,cn=example

# A specific pattern used to build the user's DN, for example "uid={0},ou=people".
# The key "{0}" must be present and will be substituted with the username.
auth.user.ldap[0].user_dn_pattern=uid={0},ou=People

# The search base for user searches. Defaults to "". Only used with a
# 'user_search_filter'.
auth.user.ldap[0].user_search_base=

# The LDAP filter used to search for users (optional). For example "(uid={0})".
# The substituted parameter is the user's login name.
auth.user.ldap[0].user_search_filter=

# The name of the LDAP attribute which contains the user's first name.
# Default is "givenName".
auth.user.ldap[0].attribute.fist_name=givenName

# The name of the LDAP attribute which contains the user's last name.
# Defaults is "sn".
auth.user.ldap[0].attribute.last_name=sn

# The name of the LDAP attribute which contains the user's e-mail address.
# Default is "mail".
auth.user.ldap[0].attribute.email=mail


#######################################
# Users authentication via SAML / Shibboleth
#

# Relative URI of the SAML entry point to initialize SAML WebSSO from the SP side (i.e. login
# user using SAML).
auth.user.saml.endpoint.login=/saml/login

# Relative URI of the WebSSO Assertion Consumer endpoint.
auth.user.saml.endpoint.websso=/saml/SSO

# Relative URI of the endpoint where to expose generated SP metadata.
auth.user.saml.endpoint.metadata=/saml/metadata

# Unique identifier of this SP.
auth.user.saml.sp.metadata.entity_id=cz.cvut.zuul.test.sp

# Base URL to construct SAML endpoints from, needs to be a URL with protocol, server, port
# and context path. When not set, then values from the request are used.
auth.user.saml.sp.metadata.entity_base_url=

# Generate SP metadata and serve it on ${auth.user.saml.endpoint.metadata}?
auth.user.saml.sp.metadata.generate=true

# The organization this SP belongs to.
#
# Key template:
#   auth.user.saml.sp.metadata.organization.<attribute>.<lang>
#   <attribute>: name, display_name, url
#   <lang>: language of the string in ISO 639-1
#
# Example:
#   auth.user.saml.sp.metadata.organization.name.en = CTU
#   auth.user.saml.sp.metadata.organization.name.cs = CVUT
#   auth.user.saml.sp.metadata.organization.url.cs = http://www.cvut.cz

# The contact people for this SP.
#
# Key template:
#   auth.user.saml.sp.metadata.contact_person[<index>].<attribute>
#   <index>: ordinal number of the entry starting with 0
#   <attribute>: name, company, email, phone, type
#
# The contact type must be: administrative, billing, other, support, or technical.
#
# Example:
#   auth.user.saml.sp.metadata.contact_person[0].name = Kevin Flynn
#   auth.user.saml.sp.metadata.contact_person[0].type = technical
#   auth.user.saml.sp.metadata.contact_person[1].name = Quorra
#   auth.user.saml.sp.metadata.contact_person[1].type = support

# Path of file with PEM-formatted SP's certificate and possibly all intermediate certificates.
# Use prefix "file:" for absolute path of a file on filesystem (e.g. file:/etc/zuul/cert.pem),
# or "classpath:" for a file on the classpath.
auth.user.saml.sp.credentials.cert_file=classpath:/config/saml/test-sp.crt

# Path of file with PEM-formatted private key for the SP's certificate.
# Use prefix "file:" for absolute path of a file on filesystem (e.g. file:/etc/zuul/cert.pem),
# or "classpath:" for a file on the classpath.
auth.user.saml.sp.credentials.key_file=classpath:/config/saml/test-sp.key

# URL of the IDP metadata to be fetched.
auth.user.saml.idp.metadata.url=https://www.testshib.org/metadata/testshib-providers.xml

# Entity ID of the IdP to be used by default.
# If empty, then first available IdP in IdP list will be used.
auth.user.saml.idp.metadata.entity_id=

# The minimum amount of time, in seconds, between refreshes of IDP metadata.
auth.user.saml.idp.metadata.min_refresh_delay=3000

# The maximum amount of time, in seconds, between refreshes of IDP metadata.
# This is used when metadata does not contain any validUntil or cacheDuration information.
auth.user.saml.idp.metadata.max_refresh_delay=144000

# Command-separated list of SAML attributes that contain the user's e-mail address.
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.email=urn:oid:0.9.2342.19200300.100.1.3

# Command-separated list of SAML attributes that contain the user's first name (given name).
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.first_name=urn:oid:2.5.4.42

# Command-separated list of SAML attributes that contain the user's first name (last name).
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.last_name=urn:oid:2.5.4.4

# Command-separated list of SAML attributes that contain the user's username (uid).
# If multiple attributes are provided, then the first attribute found in a SAML
# assertion will be used.
auth.user.saml.attribute.username=urn:oid:0.9.2342.19200300.100.1.1
